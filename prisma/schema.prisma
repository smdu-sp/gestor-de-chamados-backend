generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// ==========================================
// Modelos de Autenticação e Usuários
// ==========================================

model Usuario {
  id           String    @id @default(uuid())
  nome         String
  login        String    @unique
  email        String    @unique
  status       Boolean   @default(true)
  avatar       String?   @db.Text
  ultimoLogin  DateTime?
  criadoEm     DateTime  @default(now())
  atualizadoEm DateTime  @updatedAt
  permissao    Permissao @default(USR)

  // Relações
  chamadosAbertos   Chamado[]        @relation("CriadorDoChamado")
  chamadosAtendidos TecnicoChamado[]
  acompanhamentos   Acompanhamento[]
  logs              LogSistema[]

  @@map("usuarios")
}

enum Permissao {
  ADM
  SUP
  INF
  VOIP
  CAD
  USR
  IMP
  DEV
}

// ==========================================
// Modelos do Sistema de Chamados
// ==========================================

model Chamado {
  id            Int           @id @default(autoincrement())
  titulo        String
  descricao     String        @db.Text
  status        StatusChamado @default(NOVO)
  criadoEm      DateTime      @default(now())
  atualizadoEm  DateTime      @updatedAt
  solucionadoEm DateTime?
  fechadoEm     DateTime?

  categoriaId Int
  categoria   Categoria @relation(fields: [categoriaId], references: [id])

  subcategoriaId Int
  subcategoria   Subcategoria @relation(fields: [subcategoriaId], references: [id])

  criadorId String
  criador   Usuario @relation("CriadorDoChamado", fields: [criadorId], references: [id])

  tecnicos        TecnicoChamado[]
  acompanhamentos Acompanhamento[]

  @@map("chamados")
}

model Acompanhamento {
  id       Int      @id @default(autoincrement())
  conteudo String   @db.Text
  criadoEm DateTime @default(now())

  chamadoId Int
  chamado   Chamado @relation(fields: [chamadoId], references: [id], onDelete: Cascade)

  usuarioId String
  usuario   Usuario @relation(fields: [usuarioId], references: [id])

  @@map("acompanhamentos")
}

model TecnicoChamado {
  chamadoId Int
  chamado   Chamado @relation(fields: [chamadoId], references: [id], onDelete: Cascade)

  tecnicoId String
  tecnico   Usuario @relation(fields: [tecnicoId], references: [id])

  atribuidoEm DateTime @default(now())

  @@id([chamadoId, tecnicoId])
  @@map("tecnicos_chamados")
}

// ==========================================
// Modelos de Categorização de Chamados
// ==========================================

model Categoria {
  id   Int    @id @default(autoincrement())
  nome String @unique

  subcategorias Subcategoria[]
  chamados      Chamado[]

  @@map("categorias")
}

model Subcategoria {
  id   Int    @id @default(autoincrement())
  nome String

  categoriaId Int
  categoria   Categoria @relation(fields: [categoriaId], references: [id])
  chamados    Chamado[]

  @@unique([categoriaId, nome])
  @@map("subcategorias")
}

enum StatusChamado {
  NOVO
  ATRIBUIDO
  RESOLVIDO
  REJEITADO
  FECHADO
}

// ==========================================
// Modelos de Auditoria do Sistema
// ==========================================

model LogSistema {
  id         Int      @id @default(autoincrement())
  usuarioId  String
  usuario    Usuario  @relation(fields: [usuarioId], references: [id])
  acao       String
  entidade   String
  entidadeId String
  detalhes   String?  @db.Text
  criadoEm   DateTime @default(now())

  @@map("logs_sistema")
}
